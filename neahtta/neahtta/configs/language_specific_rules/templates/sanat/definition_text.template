{# This entry is evaluated on a translation-group by translation-group
   basis, and so far only receives the `translation_group` <tg /> node.

   Differences between this template and the parent template involve:
     - optional existence of tCtn node

 #}

{%- macro render_annotation(tg) -%}
    {# Render the annotation (<re />) node, unless it has a @fra_ref. #}
    {%- set annotations = tg.xpath('./re') -%}
    {%- set contains_grammar_link = tg.xpath('./t/@href') or False %}
    {%- set fra_ref = tg.xpath('./re/@fra_ref')|count > 0 -%}

    {%- if contains_grammar_link -%}
        {%- if annotations|count > 0 and not fra_ref -%}
            ({{ annotations[0].text }})
        {% endif -%}
    {% else %}
        {% if annotations|count > 0 and not fra_ref %}
            ({{ annotations[0].text }})
        {% endif -%}
    {% endif %}
{%- endmacro -%}

{%- macro render_link(tg, t) -%}
    {# Render a link to the detailed page. One exception: if the lexicon
    annotation entry contains a @fra_ref attribute, then we make a
    reference link, inserting this attribute's value in as a parameter.

         <tg xml:lang="sme">
            <re fra_ref="omtopersoner">om to personer</re>
            <t/>
         </tg>

         -->

         <l pos="Pron"
            type="Recipr"
            orig_entry="hverandre"
            til_ref="omtopersoner">hverandre: om to personer</l>

    #}

    {%- set text = t.text -%}

    {%- set pos = t.attrib.get('pos', '') -%}

    {%- if pos == 'Pron' and t.attrib.get('type') -%}
        {%- set pos_type = t.attrib.get('type')|tagfilter(_from, _to) -%}
        {%- set pos_text = pos|tagfilter(_from, _to)  + " " + pos_type -%}
    {%- else -%}
        {%- set pos_text = pos|tagfilter(_from, _to) -%}
    {%- endif -%}

    {%- if pos == 'Phrase' -%}
        {%- set pos_is_phrase = True -%}
    {%- endif -%}

    {%- set pos_text = pos_text|trim -%}

    {%- set link_target = '' -%}
    {%- set fra_ref = tg.xpath('./re/@fra_ref') -%}

    {%- set explanation = t.attrib.get('type', False) -%}
    {%- set explanation_exists = explanation and True -%}

    {%- if fra_ref|count > 0 -%}
        {# If this is a reference link, then there is no data in the
           <t /> node, so the <re /> becomes the link text.  #}

        {%- set annotations = tg.xpath('./re') -%}
        {%- set reference = fra_ref|join('') -%}
        {%- set text = annotations[0].text -%}
    {%- else -%}
        {%- set reference = false -%}
    {%- endif -%}

    {%- set grammar_link = t.attrib.get('href', false) -%}

    {%- if explanation_exists and explanation == 'expl' -%}
        {%- if pos_text|length > 0 %} ({{ pos_text }}){%- endif %} {{ text -}}
    {%- else -%}
        {%- if pos_is_phrase -%}
            {%- if pos_text|length > 0 %} ({{ pos_text }}) {%- endif %} {{ text -}}
        {%- else -%}
            {%- if reference -%}
                {%- if text == 'word_not_yet_translated' -%}
                    <span class="word_not_translated">{{- text -}}</span>
                {%- else -%}
                    <a href="{{ url_for('.search_pair_referred_search', _from=_from, _to=_to) }}?l_til_ref={{ reference }}">
                        {%- if pos_text|length > 0%} ({{ pos_text }}){%- endif %} {{- text -}}
                    </a> &rarr;
                {%- endif -%}
            {%- elif grammar_link -%}
                  <a href="{{ grammar_link }}" target="_blank">
                      <span class="grammar_link_text">{{- text -}}</span>
                  </a>
            {%- else -%}
                {# NB: swap from and to for these links since these are definitions. #}
                {%- if text == 'word_not_yet_translated' -%}
                    <span class="word_not_translated">{{- text -}}</span>
                {%- else -%}
                    <a href="{{ url_for('.detailed_language_pair_search', _from=_to, _to=_from, wordform=text, format='html') }}?no_compounds=true&lemma_match=true">
                        {%- if pos_text|length > 0 %} ({{ pos_text }}){%- endif %} {{ text -}}
                    </a>
                {%- endif -%}
            {%- endif -%}
        {%- endif -%}
    {%- endif -%}
{%- endmacro -%}

{%- macro render_tg(tg) -%}
    {# Render all the texts as individual links, preceded by a potential
    annotation. #}

    {%- set tCtns = tg.xpath("./tCtn") -%}
    {%- set bare_t = tg.xpath('./t | ./tf') -%}

    {# Entries may both have <t /> nodes grouped by tCtns, and
    free-standing <t /> nodes, so we need to do both. #}

    {{- render_annotation(tg) -}}
    {%- for t in bare_t -%}
        {{ render_link(tg, t) -}}{%- if not loop.last or tCtns|length > 0 -%}, {%- endif -%}
    {%- endfor -%}

    {%- if tCtns -%}
        {%- for tCtn in tCtns -%}
            {%- set tCtn_ts = tCtn.xpath('./t | ./tf') -%}
            {%- for t in tCtn_ts -%}
                {{- render_annotation(tCtn) -}}{{ render_link(tCtn, t) }}{%- if not loop.last -%}, {%- endif -%}
            {%- endfor -%}
        {%- endfor -%}
    {%- endif -%}

{%- endmacro -%}

{%- if translation_group -%}
    <span lang="{{ _to }}">{{ render_tg(translation_group) }}</span>
{%- endif -%}

{#  vim: set ts=4 sw=4 tw=72 syntax=htmljinja : #}
