{# This is the paradigm template for North Sámi.

 * Nouns: Display everything in the paradigm in a definition list
 * Verbs: Display a table with one column for present tense, and one for
   preterite tense; then display a separate definition list for
   nonfinite forms. For the negative verb and supinum negative verb, we
   also add a title on the table.

   - These are controlled by tagsets. Including more forms for verbs can
   	 be handled by adding more tags to the file `tagsets/sme.tagset`

 #}

{% from "tts.macro" import tts_button with context %}
{%- set first_l = lexicon_entry|xpath('lg/l')|first %}
{% set lemma = first_l|text %}
{% set pos = first_l|xpath('@pos')|first %}
{% set has_forms = paradigm and paradigm|length > 0 -%}
{% set paradigm_exists = paradigm|length > 0 %}

{%- if pos|upper == 'V' %}
    {% set verbs = true %}

    {% set present_verbs   = paradigm|by_tagset_value("tense", "Prs")
                                     |without_tagset("negation")
                                     |group_by_tag %}

    {% set preterite_verbs = paradigm|by_tagset_value("tense", "Prt")
                                     |without_tagset("negation")
                                     |group_by_tag %}

    {% set nonfinite_forms = paradigm|by_tagset("nonfinite_paradigm") %}

    {# As long as the paradigm files are in order, this will zip
    accurately. If not we need to manually select each form and display
    it. #}

    {# Use izip_longest to fill in the extra blanks spaces when one list
       ends first #}

    {% set zipped_verbs = izip_longest(present_verbs, preterite_verbs, fillvalue='-')|list %}

    {% set paradigm_exists = zipped_verbs|length > 0 or nonfinite_forms|length > 0 %}

    {# strip some parts of the tags that we don't need #}

    {% set prs_text      = "Prs"|tagfilter(_from, _to) %}
    {% set prt_text      = "Prt"|tagfilter(_from, _to) %}
    {% set conneg_text   = "ConNeg"|tagfilter(_from, _to) %}
    {% set verb_text     = "V"|tagfilter(_from, _to) %}
    {% set verb_text_ind = "Ind"|tagfilter(_from, _to) %}
    {% set sup_text      = "Sup"|tagfilter(_from, _to) %}
    {% set neg_text      = "Neg"|tagfilter(_from, _to) %}

    {% set nonfinite_header = False %}
    {% set is_supinum = nonfinite_forms|by_tagset("supinum")|length > 0 %}
    {# we'll know this isn't just a normal verb with a couple negative
        forms because there are 9 #}
    {% set is_negative = nonfinite_forms|by_tagset("negative")|length == 9 %}

    {% if is_supinum and is_negative %}
        {% set nonfinite_header = sup_text + " " + neg_text %}
    {% endif %}

    {% if is_negative and not is_supinum %}
        {% set nonfinite_header = neg_text %}
    {% endif %}

    {% macro clean_tag(tag_input) -%}
        {% set filtered_tag = tag_input|tagfilter(_from, _to) %}
        {% if nonfinite_header and (is_supinum or is_negative) %}
            {% set filtered_tag = filtered_tag|replace(sup_text, "")
                                              |replace(neg_text, "") %}
        {% endif %}

        {% if conneg_text in filtered_tag %}
            {{ filtered_tag|replace(verb_text, "")
                           |replace(verb_text_ind, "") }}
        {% else %}
            {{ filtered_tag|replace(prs_text, "")
                           |replace(prt_text, "")
                           |replace(verb_text, "")
                           |replace(verb_text_ind, "") }}
        {% endif %}
    {%- endmacro %}

{%- endif %}

{%- if pos|upper == 'N' or pos|upper == 'NUM' %}

    {% set sg_forms = paradigm|by_tagset_value("number", "Sg")|group_by_tag %}
    {% set pl_forms = paradigm|by_tagset_value("number", "Pl")|group_by_tag %}

    {# Use izip_longest to fill in the extra blanks spaces when one list
       ends first #}

    {% set zipped_numbers = izip_longest(sg_forms, pl_forms, fillvalue='-')|list %}
    {% set paradigm_exists = zipped_numbers|length > 0 %}

    {% set numberless_forms = paradigm|by_tagset("nouns_null_number") %}

    {% set sg_text = "Sg"|tagfilter(_from, _to) %}
    {% set pl_text = "Pl"|tagfilter(_from, _to) %}

    {% if pos|upper == 'N' %}
        {% set pos_text = pos|upper|tagfilter(_from, _to) %}
    {% elif pos|upper == 'NUM' %}
        {% set pos_text = 'Num'|tagfilter(_from, _to) %}
    {% endif %}

    {% macro clean_tag(tag_input) %}
        {{ tag_input|tagfilter(_from, _to)
                    |replace(pos_text, "")
                    |replace(sg_text, "")
                    |replace(pl_text, "") }}
    {% endmacro %}

{% endif -%}

{%- if pos|upper == 'A'  %}

    {% set adj_text = "A"|tagfilter(_from, _to) %}

    {% macro clean_tag(tag_input) %}
        {{ tag_input|tagfilter(_from, _to)
                    |replace(adj_text, "") }}
    {% endmacro %}

{% endif -%}

{%- if pos|upper == 'ADV'  %}

    {% set adj_text = "A"|tagfilter(_from, _to) %}
    {% set adv_text = "Adv"|tagfilter(_from, _to) %}
    {% set der_text = "Der/AAdv"|tagfilter(_from, _to) %}

    {% macro clean_tag(tag_input) %}
        {{ tag_input|tagfilter(_from, _to)
                    |replace(der_text, "")
                    |replace(adj_text, "") }}
    {% endmacro %}

{% endif -%}

{%- if pos|upper == 'PRON'  %}

    {% set pron_text  = "Pron"|tagfilter(_from, _to) %}
    {% set indef_text = "Indef"|tagfilter(_from, _to) %}
    {% set sg_text    = "Sg"|tagfilter(_from, _to) %}
    {% set pl_text    = "Pl"|tagfilter(_from, _to) %}

    {% set pron_type = lexicon_entry|xpath('./lg/l/@type')|first %}
    {% set pron_type_text = pron_type|tagfilter(_from, _to) %}

    {# If there are nominal number markings, then we'll split these
       into two columns. Must determine this by checking the tagsets.

       Works for words like eará, soames, etc.

       TODO: mii +Rel
             gii +Rel
             makkár +Rel / +Interr
             dat nr="Sg", type="Dem"
             dat nr="Pl", type="Dem"

             recipr is broken
                /detail/sme/nob/goabbat%20guoimmisteame.html
    #}

    {% set two_columns = False %}
    {% set sg_forms = paradigm|by_tagset_value("number", "Sg")|group_by_tag %}
    {% set pl_forms = paradigm|by_tagset_value("number", "Pl")|group_by_tag %}

    {% if sg_forms|length > 0 and pl_forms|length > 0 %}
        {% set two_columns = True %}
        {% set zipped_numbers = izip_longest(sg_forms, pl_forms, fillvalue='-')|list %}
        {% set numberless_forms = paradigm|by_tagset("nouns_null_number") %}
    {% endif %}

    {% macro clean_tag(tag_input) %}
        {% if two_columns %}
            {{ tag_input|tagfilter(_from, _to)
                        |replace(pron_text, "")
                        |replace(sg_text, "")
                        |replace(pl_text, "")
                        |replace(pron_type_text, "") }}
        {% else %}
            {{ tag_input|tagfilter(_from, _to)
                        |replace(pron_text, "")
                        |replace(pron_type_text, "") }}
        {% endif %}
    {% endmacro %}

{% endif -%}

{%- macro full_paradigm_link() %}
            {# URLFOR #}
    <a class="full-paradigm-link"
       style="opacity: .8;"
       href="http://gtweb.uit.no/cgi-bin/smi/smi.cgi?text={{ lemma }}&pos={{ pos }}&mode=full&action=paradigm&lang=sme&plang=sme">
        {%- trans -%}Full paradigm{%- endtrans -%} &nbsp;&rarr;
    </a>
{% endmacro -%}

{# For use in derivations and other links which are not from the original lemma #}
{%- macro standard_paradigm_link_deriv(deriv_lemma, link_text) %}
            {# URLFOR #}
    <a style="opacity: .8;"
       href="https://gtweb.uit.no/cgi-bin/smi/smi.cgi?text={{ deriv_lemma }}&pos={{ pos }}&mode=standard&action=paradigm&lang=sme&plang=sme">
        {{ link_text }} &nbsp;&rarr;
    </a>
    {{ tts_button(deriv_lemma) }}
{% endmacro -%}

{# For use in e.g. adjective positive forms #}
{%- macro mini_paradigm_link_deriv(deriv_lemma, link_text) %}
            {# URLFOR #}
    <a style="opacity: .8;"
       href="https://gtweb.uit.no/cgi-bin/smi/smi.cgi?text={{ deriv_lemma }}&pos={{ pos }}&mode=minimal&action=paradigm&lang=sme&plang=sme">
        {{ link_text }} &nbsp;&rarr;
    </a>
    {{ tts_button(deriv_lemma) }}
{% endmacro -%}

{% macro link_lemma_paradigm(lemma_par, msd_par) -%}
    {% if not orig_from %}
        {% set orig_from = _from %}
    {% endif %}
    {%- set korp_opts = current_pair_settings.korp_options %}
    {% if korp_opts.lemma_search_path and lemma_par -%}
        {% set l_host = current_pair_settings.korp_search_host %}
        {% set query_path = 'cqp|[lemma = "INPUT_LEMMA" & msd = "INPUT_MSD"]' %}

        {% if korp_opts.is_korp_default_lang %}
            {% set search_path = korp_opts.lemma_search_path_default_lang %}
        {% else %}
            {% set search_path = korp_opts.lemma_search_path.replace('TARGET_LANG_ISO', orig_from) %}
        {% endif %}

        {% if korp_opts.korp_parallel %}
            {% set search_path = korp_opts.bilingual_wordform_search_path
                        .replace('TARGET_LANG_ISO', orig_from) %}
            {% set query_path = 'cqp|[lemma = "INPUT_LEMMA" & msd = "INPUT_MSD"]' %}
        {% endif %}

        {% set query = search_path.replace(
            'SEARCH_QUERY',
            query_path.replace(
                'INPUT_LEMMA',
                lemma_par
            ).replace('INPUT_MSD',
            msd_par)|urlencode_quote(safe="#/"))
        %}

        {% if l_host %}
            {% set s_href = l_host + query %}
            {{ s_href }}
        {% endif %}

        {% set link_corpus_param = current_pair_settings.link_corpus_parameter %}
        {% if link_corpus_param|length >0 %}
              {% set s_href = s_href + '&corpus=' + link_corpus_param %}
              {{ s_href }}
        {% endif %}
    {%- endif %}
{%- endmacro %}


{%- if has_forms %}

{%- if pos|upper == 'V' %}

    {% if paradigm_exists %}
        {% if zipped_verbs %}

        <table class="tableparadigm miniparadigm">

            {# This is the two-column tense paradigm #}

                <tr>
                    <th></th>
                    <th lang="{{ _to }}">{{ prs_text }} <em>(odne)</em></th>
                    <th lang="{{ _to }}">{{ prt_text }} <em>(ikte)</em></th>
                </tr>

                {%- for present_forms, preterite_forms in zipped_verbs -%}
                    <tr class="POS-V">

                    {% if present_forms[0].tag %}
                        {% set tag_display = clean_tag(present_forms[0].tag) %}
                    {% elif preterite_forms[0].tag %}
                        {% set tag_display = clean_tag(preterite_forms[0].tag) %}
                    {% endif %}

                    <th class="tag" lang="{{ _to }}">{{ tag_display }}</th>

                    {% set dict_prs = {'1.p.ent.': 'V.Ind.Prs.Sg1', '2.p.ent.': 'V.Ind.Prs.Sg2', '3.p.ent.': 'V.Ind.Prs.Sg3', '1.p.tot.': 'V.Ind.Prs.Du1', '2.p.tot.': 'V.Ind.Prs.Du2', '3.p.tot.': 'V.Ind.Prs.Du3', '1.p.flt.': 'V.Ind.Prs.Pl1', '2.p.flt.': 'V.Ind.Prs.Pl2', '3.p.flt.': 'V.Ind.Prs.Pl3'} %}
                    {% set msd_var_prs = [] %}
                    {% for key, value in dict_prs.items() %}
                      {% if key|string in tag_display|string %}
                        {% do msd_var_prs.append(value|string) %}
                      {% endif %}
                    {% endfor %}

                    {% set dict_prt = {'1.p.ent.': 'V.Ind.Prt.Sg1', '2.p.ent.': 'V.Ind.Prt.Sg2', '3.p.ent.': 'V.Ind.Prt.Sg3', '1.p.tot.': 'V.Ind.Prt.Du1', '2.p.tot.': 'V.Ind.Prt.Du2', '3.p.tot.': 'V.Ind.Prt.Du3', '1.p.flt.': 'V.Ind.Prt.Pl1', '2.p.flt.': 'V.Ind.Prt.Pl2', '3.p.flt.': 'V.Ind.Prt.Pl3'} %}
                    {% set msd_var_prt = [] %}
                    {% for key, value in dict_prt.items() %}
                      {% if key|string in tag_display|string %}
                        {% do msd_var_prt.append(value|string) %}
                      {% endif %}
                    {% endfor %}

                    {% if present_forms and present_forms != '-' %}
                        {% set s_display = link_lemma_paradigm(lemma, msd_var_prs[0]|string) %}
                        <td lang="{{ _from }}">
                            {% for form in present_forms %}
                                {{ form.form }}
                                {% if _from == "sme" %}
                                    {{ tts_button(form.form) }}
                                {% endif %}
                                <br />
                            {% endfor %}
                        </td>
                      {% else %}
                        <td lang="{{ _from }}">&mdash;</td>
                    {% endif %}

                    {% if preterite_forms and preterite_forms != '-' %}
                        {% set s_display = link_lemma_paradigm(lemma, msd_var_prt[0]|string) %}
                        <td lang="{{ _from }}">
                            {% for form in preterite_forms %}
                                {{ form.form }}
                                {% if _from == "sme" %}
                                    {{ tts_button(form.form) }}
                                {% endif %}
                                <br />
                            {% endfor %}
                            </td>
                    {% else %}
                        <td lang="{{ _from }}">&mdash;</td>
                    {% endif %}

                    </tr>

                {%- endfor -%}
        </table>
        {% endif %}

        <dl class="dl-horizontal miniparadigm">
            {% if nonfinite_header %}
                <dt>{{ nonfinite_header }}</dt><dd>&nbsp;</dd>
            {% endif %}

            {% set noninf_forms = nonfinite_forms|group_by_tag %}
            {% for var in noninf_forms %}
                {% if var[0].tag %}
                    <dt>{{ clean_tag(var[0].tag) }}</dt>
                {% endif %}
                <dd lang="{{ _from }}">{{ var|join('<br />', attribute='form')|safe }}</dd>
            {% endfor %}
        </dl>
    {% endif %}

{% elif pos|upper == 'N' or pos|upper == 'NUM' %}
    {% if paradigm_exists %}
        <table class="tableparadigm miniparadigm">
            <tr>
                <th></th>
                <th lang="{{ _to }}">{{ sg_text }}</th>
                <th lang="{{ _to }}">{{ pl_text }}</th>
            </tr>

        {%- for sgs, pls in zipped_numbers -%}
            <tr>

            {% if sgs[0].tag %}
                {% set tag_display = clean_tag(sgs[0].tag) %}
            {% elif pls[0].tag %}
                {% set tag_display = clean_tag(pls[0].tag) %}
            {% endif %}

            <th class="tag" lang="{{ _to }}">{{ tag_display }}</th>

            {% if sgs and sgs != '-' %}
                <td lang="{{ _from }}">
                    {% for sg in sgs %}
                        {% set _sg = sg.form %}
                        {{ _sg|safe }}
                        {% if _from == "sme" %}
                            {{ tts_button(_sg) }}
                        {% endif %}
                        <br />
                    {% endfor %}
                </td>
            {% else %}
                <td lang="{{ _from }}" class="center">&mdash;</td>
            {% endif %}

            {% if pls and pls != '-' %}
                <td lang="{{ _from }}">
                    {% for pl in pls %}
                        {% set _pl = pl.form %}
                        {{ _pl|safe }}
                        {% if _from == "sme" %}
                            {{ tts_button(_pl) }}
                        {% endif %}
                        <br />
                    {% endfor %}
                </td>
            {% else %}
                <td lang="{{ _from }}" class="center">&mdash;</td>
            {% endif %}

            </tr>

        {%- endfor -%}

        {% set numb_forms = numberless_forms|group_by_tag %}
        {% for var in numb_forms %}
            <tr>
                {% if var[0].tag %}
                    <th class="tag" lang="{{ _to }}">{{ clean_tag(var[0].tag) }}</th>
                {% endif %}
                <td colspan="2" lang="{{ _from }}" class="center">{{ var|join('<br />', attribute='form')|safe }}</td>
            </tr>
        {% endfor %}

        </table>
    {% endif %}
{% elif pos|upper == 'A' %}
    {% set pos_text = "A"|tagfilter(_from, _to) %}
    {% set ord_text = "Ord"|tagfilter(_from, _to) %}

    {% macro clean_tag(tag_input) %}
        {{ tag_input|tagfilter(_from, _to)
                    |replace(pos_text, "")
                    |replace(ord_text, "") }}
    {% endmacro %}

    <table class="tableparadigm miniparadigm">
        {% set adj_forms = paradigm|group_by_tag %}
        <tr></tr>
        {% for var in adj_forms %}
            <tr>
                {% if var[0].tag %}
                    <th>{{ clean_tag(var[0].tag) }}</th>
                {% endif %}

                {# Link comparative and superlative lemmas to their paradigms #}
                {% if var|by_tagset("derivations")|by_tagset_value("case", "Nom")|length > 0 %}
                    <td lang="{{ _from }}">
                        {{ standard_paradigm_link_deriv(var|first_form|regex_remove("\([^)]*\) "), var|join('<br />', attribute='form')|safe) }}
                    </td>
                {% elif var|without_tagset("derivations")|by_tagset_value("case", "Nom")|by_tagset_value("number", "Sg")|length > 0 %}
                    <td lang="{{ _from }}">
                        {{ mini_paradigm_link_deriv(var|first_form, var|join('<br />', attribute='form')|safe) }}
                    </td>
                {% else %}
                    <td lang="{{ _from }}">
                        {% for x in var %}
                            {% set y = x.form|safe %}
                            {{ y }} {{ tts_button(y) }}<br/>
                        {% endfor %}
                    </td>
                {% endif %}
            </tr>
        {% endfor %}
    </table>
{% elif pos|upper == 'ADV' %}
    <dl class="dl-horizontal miniparadigm">
      {%- for form in paradigm -%}

          {% if form.tag %}
              <dt>{{ clean_tag(form.tag)  }}</dt>
          {% endif %}

          {% if form.form %}
              <dd lang="{{ _from }}">{{ form.form }}</dd>
          {% else %}
              <dd lang="{{ _from }}">?</dd>
          {% endif %}
      {%- endfor -%}
    </dl>

{% elif pos|upper == 'PRON' %}

    {% if (pron_type|upper == 'INDEF' or pron_type|upper == 'REL' or pron_type|upper == 'DEM') and two_columns %}
        {% if paradigm_exists %}

            <table class="tableparadigm miniparadigm">
                <tr>
                    <th></th>
                    <th lang="{{ _to }}">{{ sg_text }}</th>
                    <th lang="{{ _to }}">{{ pl_text }}</th>
                </tr>

            {%- for sgs, pls in zipped_numbers -%}
                <tr>

                {% if sgs[0].tag %}
                    {% set tag_display = clean_tag(sgs[0].tag) %}
                {% elif pls[0].tag %}
                    {% set tag_display = clean_tag(pls[0].tag) %}
                {% endif %}

                <th class="tag" lang="{{ _to }}">{{ tag_display }}</th>

                {% if sgs and sgs != '-' %}
                    <td lang="{{ _from }}">{{ sgs|join('<br />', attribute='form')|safe }}</td>
                {% else %}
                    <td lang="{{ _from }}" class="center">&mdash;</td>
                {% endif %}

                {% if pls and pls != '-' %}
                    <td lang="{{ _from }}">{{ pls|join('<br />', attribute='form')|safe }}</td>
                {% else %}
                    <td lang="{{ _from }}" class="center">&mdash;</td>
                {% endif %}

                </tr>

            {%- endfor -%}

            {% set numb_forms = numberless_forms|group_by_tag %}
            {% for var in numb_forms %}
                <tr>
                    {% if var[0].tag %}
                        <th class="tag" lang="{{ _to }}">{{ clean_tag(var[0].tag) }}</th>
                    {% endif %}
                    <td colspan="2" lang="{{ _from }}" class="center">{{ var|join('<br />', attribute='form')|safe }}</td>
                </tr>
            {% endfor %}

            </table>

        {% endif %}
    {% else %}
        <dl class="dl-horizontal miniparadigm">
            <dt>{{ pron_text }} {{ pron_type_text }}</dt>
            <dd>&nbsp;</dd>

            {% set pron_forms = paradigm|group_by_tag %}
            {% for var in pron_forms %}
                {% if var[0].tag %}
                    <dt>{{ clean_tag(var[0].tag) }}</dt>
                {% endif %}
                <dd lang="{{ _from }}">{{ var|join('<br />', attribute='form')|safe }}</dd>
            {% endfor %}
        </dl>
    {% endif %}

{% else %}
    <dl class="dl-horizontal miniparadigm">
      {%- for form in paradigm -%}

          {% if form.tag %}
              <dt>{{ form.tag|tagfilter(_from, _to)  }}</dt>
          {% endif %}

          {% if form.form %}
              <dd lang="{{ _from }}">{{ form.form }}</dd>
          {% else %}
              <dd lang="{{ _from }}">?</dd>
          {% endif %}
      {%- endfor -%}
    </dl>

{% endif %}
{% if paradigm_exists %}
    {{ full_paradigm_link() }}
{% endif %}
{% endif -%}


{# vim: set ts=4 sw=4 tw=72 syntax=htmljinja : #}
